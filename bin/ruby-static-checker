#!/usr/bin/env ruby
#
# Detect name errors in Ruby programs
#
# Works by first loading the Ruby code, then analyzing that.
#
# Obviously ruby-checker can be defeated through use of
# method_missing, dynamic method definition, and other magical
# magic. So don't use it on code using those paradigms.
#
# Architecture:
#
# - Load the code
# - Make a pass through all classes to build a mapping of class names
#   to environments
# - Make a pass through all classes, checking each's calls to functions
#   against the environments built in the first stage.
#
# Notes: how does ParseTree deal with extends?
require 'logger'
require 'optparse'
require 'pp'
require 'set'

require 'rubygems'
require 'parse_tree'

require File.join(File.dirname(__FILE__), '../lib/ruby-static-checker')

$log = Logger.new(STDOUT)
$log.level = Logger::WARN

module RubyStaticChecker
  class Error < StandardError; end
  class TreeError < StandardError; end

  class Env
    attr_reader :me
    @@envs = {}

    def self.get_and_populate(klass)
      raise Error.new("Invalid klass: #{klass.inspect}") unless klass && (klass.kind_of?(Class) || klass.kind_of?(Module))
      env = get(klass)
      Analyzer.build_environment_for_class(klass, env) unless env.populated?
      env
    end

    def self.get(klass)
      @@envs[klass] ||= self.new(klass)
    end

    def initialize(me)
      @me = me
      @instance = {}
      @class = {}
      @superclass = nil
      @mixins = []
    end

    def mark_populated!; @populated = true; end
    def populated?; @populated; end

    def add_instance_method(name)
      @instance[name] = :method
    end
    def instance_method?(name)
      !!@instance[name]
    end

    def add_class_method(name)
      @class[name] = :method
    end
    def class_method?(name)
      !!@class[name]
    end

    def set_superclass(name)
      @superclass = name
    end

    def add_mixin(name)
      @mixins << name
    end

    def defined?(var, klass_context)
      # TODO: watch out for method_missing
      return true if builtins.include?(var)
      return true if klass_context && builtin_class_methods.include?(var)

      if klass_context
        return true if @class[var]
        delegators = [@superclass]
      else
        return true if @instance[var]
        delegators = [@superclass] + @mixins
      end

      delegators.compact.any? do |parent|
        self.class.get_and_populate(parent).defined?(var, klass_context)
      end
    end

    def pretty_call(name, klass_context)
      if klass_context
        "#{@me}.#{name}"
      else
        "#{@me}<instance>.#{name}"
      end
    end

    private

    def builtins
      Set.new([:raise, :Integer, :Array, :warn, :block_given?, :lambda,
               :print, :puts, :sprintf, :eval, :caller, :select, :extend,
               :include, :require, :loop, :format, :sleep, :catch, :throw,
               :exec, :fork, :dup, :respond_to?, :object_id, :p])
    end

    def builtin_class_methods
      # TODO: this includes some private methods, maybe should distinguish
      Set.new([:attr_writer, :attr_reader, :attr_accessor, :const_set, :define_method,
               :remove_const, :remove_method])
    end
  end

  class Main
    attr_reader :global_env

    def initialize(path)
      @path = path
      @builtin_classes = all_classes_to_analyze
    end

    def main
      load_code
      # build_environments
      check_against_environments
    end

    def load_code
      $log.debug("Loading #{@path}")
      require @path
    end

    # TODO: write this with some cooler pattern-matching
    def build_environments
      classes_to_analyze.each { |klass| Analyzer.analyze_class(klass) }
    end

    def check_against_environments
      classes_to_analyze.each do |klass|
        begin
          Checker.check_for_name_errors(klass)
        rescue
          $log.warn("Skipping #{klass.inspect}")
        end
      end
    end

    def classes_to_analyze
      all_classes_to_analyze - @builtin_classes
    end

    def all_classes_to_analyze
      ObjectSpace.each_object.select do |object|
        object.kind_of?(Class) || object.kind_of?(Module)
      end
    end
  end

  module Util
    def expect(val1, val2=nil, &blk)
      if block_given?
        raise Error.new("Cannot call expect with a block and a second argument") unless val2.nil?
        raise TreeError.new("Expected #{val1.inspect} did not pass the provided block") unless blk.call(val1)
      else
        raise TreeError.new("Expected #{val1.inspect} but #{val2.inspect} obtained") unless val1 == val2
      end
    end

    def symbolize(name)
      name == '' ? :nil : name.to_sym
    end

    def all_methods(klass)
      klass.methods + klass.protected_methods + klass.private_methods
    end

    def all_instance_methods(klass)
      klass.instance_methods + klass.protected_instance_methods + klass.private_instance_methods
    end
  end

  module Analyzer
    extend Util

    def self.analyze_class(klass)
      env = Env.get(klass)
      build_environment_for_class(klass, env)
    end

    def self.build_environment_for_class(klass, env)
      # TODO: should probably just do this for everything
      instance_methods = ['initialize'] + all_instance_methods(klass)
      instance_methods.each { |name| env.add_instance_method(name.to_sym) }
      all_methods(klass).each { |name| env.add_class_method(name.to_sym) }

      return if klass == Object

      begin
        ast = ParseTree.translate(klass)
      rescue
        $log.error("Could not build AST for #{klass.inspect}")
        raise
      end
      $log.debug("Building enviroment for #{klass.inspect}: #{ast.pretty_inspect}")

      # Should really be doing this functionally. Oh well.
      case type = ast.shift
      when :class
        # Apparently some classes (e.g. Tempfile's superclass) can
        # have empty string names. We are currently using a name-based
        # system; may want to switch to object-based in the future.
        expect(ast.shift) do |value|
          if klass.name.length > 0
            klass.name.to_sym == value
          else
            value == :nil || value.to_s =~ /^UnnamedClass_\d+$/
          end
        end
        # Can't ParseTree.translate(Object) so this works. This may
        # also need the UnnamedClass logic.
        expect([:const, symbolize(klass.superclass.name)], ast.shift)
        env.set_superclass(klass.superclass)
      when :module
        expect(klass.name.to_sym, ast.shift)
      else
        raise NotImplementedError.new("Unrecognized class/module type #{type.inspect}")
      end
      ast.each { |method| add_to_environment(method, env) }

      env.mark_populated!
    end

    def self.add_to_environment(ast, env)
      case type = ast.shift
      when :defn
        name = ast.shift
        unless env.instance_method?(name)
          $log.info("Definition for #{env.pretty_call(name, false)} found, but it is not listend as an instance method")
          env.add_instance_method(name)
        end
        ast.shift
      when :defs
        expect([:self], ast.shift)
        name = ast.shift
        unless env.class_method?(name)
          $log.info("Definition for #{env.pretty_call(name, true)} found, but it is not listend as a class method")
          env.add_class_method(name)
        end
        ast.shift
      when :call
        # TODO: clean this up a lot
        expect(nil, ast.shift)
        expect(:include, ast.shift)
        arglist = ast.shift
        expect(:arglist, arglist.shift)
        mixin_name = get_nested_name(arglist.shift)
        mixin = fetch_class(mixin_name)
        expect([], arglist)
        env.add_mixin(mixin)
      else
        raise NotImplementedError.new("Unrecognized method definition type #{type.inspect}")
      end

      expect([], ast)
    end

    def self.get_nested_name(ast)
      case type = ast.shift
      when :colon2
        namespace = get_nested_name(ast.shift)
        name = ast.shift
        res = "#{namespace}::#{name}".to_sym
      when :const
        res = ast.shift
      else
        raise NotImplementedError.new("Unrecognized class nesting construct #{type.inspect}")
      end

      expect([], ast)
      res
    end
  end

  module Checker
    extend Util

    def self.check_for_name_errors(klass)
      env = Env.get_and_populate(klass)
      check_class_against_environment(klass, env)
    end

    def self.check_class_against_environment(klass, env)
      ast = ParseTree.translate(klass)
      $log.debug("Checking for name errors for #{klass.inspect}: #{ast.pretty_inspect}")

      case type = ast.shift
      when :class
        expect(ast.shift) do |value|
          if klass.name.length > 0
            klass.name.to_sym == value
          else
            value == :nil || value.to_s =~ /^UnnamedClass_\d+$/
          end
        end
        expect([:const, symbolize(klass.superclass.name)], ast.shift)
      when :module
        expect(klass.name.to_sym, ast.shift)
      else
        raise NotImplementedError.new("Unrecognized class/module type #{type.inspect}")
      end
      ast.each { |method| check_method_against_environment(method, env) }

      env.mark_populated!
    end

    def self.check_method_against_environment(ast, env)
      $log.debug("Checking method #{ast.inspect}")

      case type = ast.shift
      when :defn
        name = ast.shift
        check_method_body(ast.shift, false, env)
      when :defs
        expect([:self], ast.shift)
        name = ast.shift
        check_method_body(ast.shift, true, env)
      when :call
        # Who cares about mixins
        ast = []
      else
        raise NotImplementedError.new("Unrecognized method definition type #{type.inspect}")
      end

      expect([], ast)
    end

    def self.check_method_body(tree, klass_context, env)
      case type = tree.shift
      when :and, :or, :op_asgn_and, :op_asgn_or
        # Not sure how :op_asgn_or differs from :or
        # >> class A; def foo; a && b && c; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:and, [:vcall, :a], [:and, [:vcall, :b], [:vcall, :c]]]]]]
        a = tree.shift
        b = tree.shift
        check_method_body(a, klass_context, env)
        check_method_body(b, klass_context, env)
      when :args
        # No idea what this is
        # [:defs, [:self], :incompatible_argument_styles, [:scope, [:args, :*]]]
        expect(:*, tree.shift)
      when :argscat, :op_asgn1, :op_asgn2
        # No idea what this is
        while tree.length > 0
          case elt = tree.shift
          when Symbol: next
          when Array: check_method_body(elt, klass_context, env)
          else
            raise "Unrecognized elt #{elt.inspect}"
          end
        end
      when :alias
        # TODO: make sure target actually is defined if it's a lit
        # >> class A; def foo; alias :a :b; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:alias, [:lit, :a], [:lit, :b]]]]]
        source = tree.shift
        target = tree.shift
        check_method_body(source, klass_context, env)
        check_method_body(target, klass_context, env)
      when :array, :hash
        check_method_body(tree.shift, klass_context, env) while tree.length > 0
      when :attrset
        # Not really sure what this one is, but ok
        # [:defn, :datetime_format=, [:attrset, :@datetime_format]]
        expect(tree.shift) { |value| value.kind_of?(Symbol) && value.to_s.start_with?('@') }
      when :back_ref
        # Not sure what this is
        expect(tree.shift) { |value| value.kind_of?(Symbol) }
      when :block
        # Huge hack:
        # >> module A; def foo(a,b,c=1); end; end
        # => nil
        # >> ParseTree.translate A
        # => [:module, :A, [:defn, :foo, [:scope, [:block, [:args, :a, :b, :c, [:block, [:lasgn, :c, [:lit, 1]]]], [:nil]]]]]
        tree.shift if (args = tree[0]) && (args[0] == :args)
        check_method_body(tree.shift, klass_context, env) while tree.length > 0
      when :block_arg
        # TODO: add an expect? Do something useful with types?
        # [:defn, :log, [:scope, [:block, [:args, :severity, :message, [:block, [:lasgn, :message, [:nil]]]], [:block_arg, :block], [:if, [:ivar, :@log], [:block_pass, [:lvar, :block], [:call, [:ivar, :@log], :add, [:array, [:lvar, :severity], [:lvar, :message], [:ivar, :@appname]]]], nil]]]]
        tree.shift
      when :block_pass
        # >> class A; def foo; bar(&blk); end; end
        # => nil
        # >> ParseTree.translate A
        # => [:class, :A, [:const, :Object], [:defn, :foo, [:scope, [:block, [:args], [:block_pass, [:vcall, :blk], [:fcall, :bar]]]]]]
        block = tree.shift
        fcall = tree.shift
        check_method_body(block, klass_context, env)
        check_method_body(fcall, klass_context, env)
      when :bmethod, :dot2, :dot3
        # No idea what there are
        while tree.length > 0
          component = tree.shift
          check_method_body(component, klass_context, env) if component
        end
      when :call, :attrasgn
        # [:call, [:gvar, :$!]
        # [[:const, :Logger], :new, [:array, [:const, :STDERR]]]
        $log.debug('TODO: look for undefined method calls')
        obj = tree.shift
        method = tree.shift
        # arglist
        tree = []
      when :case
        # >> class A; def foo;  case 1; when 2: 3; else; 4; end; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:case, [:lit, 1], [:when, [:array, [:lit, 2]], [:lit, 3]], [:lit, 4]]]]]
        value = tree.shift
        check_method_body(value, klass_context, env) if value
        while tree.length > 0
          when_spec = tree.shift
          # As long as it's not the else statement
          expect(:when, when_spec[0]) if tree.length > 0
          check_method_body(when_spec, klass_context, env) if when_spec
        end
      when :cfunc
        # Call a C function, I think
        addr = tree.shift
        arg = tree.shift
        expect(addr) { |value| value.kind_of?(Numeric) }
        expect(arg) { |value| value.kind_of?(Numeric) }
      when :colon2
        $log.debug('TODO: look for defined nested constants')
        nested = tree.shift
        namespace = tree.shift
        check_method_body(nested, klass_context, env)
      when :colon3
        # >> class A; def foo; ::String; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:colon3, :String]]]]
        $log.debug('TODO: look for defined toplevel constants')
        tree.shift
      when :const
        $log.debug('TODO: look for defined constants')
        tree.shift
      when :cvar
        # Class variable
        expect(tree.shift) { |value| value.kind_of?(Symbol) && value.to_s.start_with?('@@') }
      when :cvasgn
        # Class variable assign
        name = tree.shift
        target = tree.shift
        expect(name) { |value| value.kind_of?(Symbol) && value.to_s.start_with?('@@') }
        check_method_body(target, klass_context, env) while tree.length > 0
      when :dasgn, :dasgn_curr, :dvar
        # Not really sure what these are
        # [:defn, :find, [:scope, [:block, [:args, :glob], [:iter, [:call, [:ivar, :@gemspecs], :find], [:dasgn_curr, :spec], [:fcall, :matching_file?, [:array, [:dvar, :spec], [:lvar, :glob]]]]]]]
        expect(tree.shift) { |value| value.kind_of?(Symbol) }
        check_method_body(tree.shift, klass_context, env) while tree.length > 0
      when :defined, :not
        value = tree.shift
        check_method_body(value, klass_context, env)
      when :defn
        $log.warn('Dynamically defined method encountered')
        name = tree.shift
        body = tree.shift
        check_method_body(body, klass_context, env)
      when :defs
        target = tree.shift
        name = tree.shift
        body = tree.shift
        check_method_body(target, true, env)
        # Don't check the body because it's in some other random
        # object's scope
      when :dregx, :dregx_once
        # Not really sure what an integer here means
        # [:dregx, "^", [:evstr, [:lvar, :gem_pattern]], 1]
        while tree.length > 0
          case string_component = tree.shift
          when String: next
          when Numeric: next
          when Array: check_method_body(string_component, klass_context, env)
          else
            raise "Unrecognized type of string component #{string_component.inspect}"
          end
        end
      when :dstr, :dsym, :dxstr
        # Not sure what diff between dxstr and dstr is
        # [:dstr, "Start of ", [:evstr, [:ivar, :@appname]], [:str, "."]]]]
        # [:dxstr, "", [:evstr, [:lvar, :cmd]]]
        while tree.length > 0
          case string_component = tree.shift
          when String: next
          when Array: check_method_body(string_component, klass_context, env)
          else
            raise "Unrecognized type of string component #{string_component.inspect}"
          end
        end
      when :ensure
        # >> class A; def foo; begin; 1; ensure 2; end; end; end
        # => nil
        # >> ParseTree.translate A
        # => [:class, :A, [:const, :Object], [:defn, :foo, [:scope, [:block, [:args], [:ensure, [:lit, 1], [:lit, 2]]]]]]
        begin_block = tree.shift
        ensure_block = tree.shift
        check_method_body(begin_block, klass_context, env)
        check_method_body(ensure_block, klass_context, env)
      when :evstr
        # >> class A; def foo; "#{a + b}"; end; end
        # => nil
        # >> ParseTree.translate A
        # => [:class, :A, [:const, :Object], [:defn, :foo, [:scope, [:block, [:args], [:dstr, "", [:evstr, [:call, [:vcall, :a], :+, [:array, [:vcall, :b]]]]]]]]]
        # TODO: might have multiple possible args
        arg = tree.shift
        check_method_body(arg, klass_context, env)
      when :false, :nil, :true
      when :fbody
        # Not really sure what this is
        body = tree.shift
        check_method_body(body, klass_context, env)
      when :for
        # >> class A; def foo; for i in j; 2; end; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:for, [:vcall, :j], [:lasgn, :i], [:lit, 2]]]]]
        value = tree.shift
        holder = tree.shift
        body = tree.shift
        check_method_body(value, klass_context, env)
        check_method_body(holder, klass_context, env) if holder
        check_method_body(body, klass_context, env) if body
      when :iter
        # >> class A; def foo; bar { puts }; end; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:iter, [:fcall, :bar], nil, [:vcall, :puts]]]]]
        value = tree.shift
        holder = tree.shift
        body = tree.shift
        check_method_body(value, klass_context, env)
        check_method_body(holder, klass_context, env) if holder
        # TODO: do something with this block, maybe. Can't really
        # recurse because who knows where this block will
      when :gasgn
        # Global assign
        name = tree.shift
        assigned = tree.shift
        expect(name) { |value| value.kind_of?(Symbol) && value.to_s.start_with?('$') }
        # Not sure what assigned being nil means, but ok.
        check_method_body(assigned, klass_context, env) if assigned
      when :gvar
        # Global variable
        name = tree.shift
        expect(name) { |value| value.kind_of?(Symbol) && value.to_s.start_with?('$') }
      when :if
        predicate = tree.shift
        positive = tree.shift
        negative = tree.shift
        check_method_body(predicate, klass_context, env)
        check_method_body(positive, klass_context, env) if positive
        check_method_body(negative, klass_context, env) if negative
      when :ivar, :lit, :lvar
        # TODO: add an expect
        tree.shift
      when :lasgn, :iasgn
        var = tree.shift
        value = tree.shift
        check_method_body(value, klass_context, env) if value
      when :masgn
        # Not reaaally sure what this is. Probably something with
        # pattern-matching.
        a = tree.shift
        b = tree.shift
        c = tree.shift
        check_method_body(a, klass_context, env) if a
        check_method_body(b, klass_context, env) if b
        check_method_body(c, klass_context, env) if c
      when :match2, :match3
        # What is the difference between match2 and match3? Who knows.
        regex = tree.shift
        value = tree.shift
        check_method_body(regex, klass_context, env)
        check_method_body(value, klass_context, env)
      when :nth_ref
        # No idea what this is
        expect(tree.shift) { |value| value.kind_of?(Integer) }
      when :resbody
        # >> class A; def foo; begin 1; rescue Exception => e; 2; end; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:rescue, [:lit, 1], [:resbody, [:array, [:const, :Exception]], [:block, [:lasgn, :e, [:gvar, :$!]], [:lit, 2]]]]]]]
        exception_type = tree.shift
        rescue_body = tree.shift
        # Not sure what this is... else of some sort?
        other_body = tree.shift
        check_method_body(exception_type, klass_context, env) if exception_type
        check_method_body(rescue_body, klass_context, env) if rescue_body
        check_method_body(other_body, klass_context, env) if other_body
      when :rescue
        # >> class A; def foo; begin; 1; rescue 2; end; end; end
        # => nil
        # >> ParseTree.translate A
        # => [:class, :A, [:const, :Object], [:defn, :foo, [:scope, [:block, [:args], [:rescue, [:lit, 1], [:resbody, [:array, [:lit, 2]]]]]]]]
        begin_block = tree.shift
        rescue_block = tree.shift
        else_block = tree.shift
        expect(:resbody, rescue_block[0])
        check_method_body(begin_block, klass_context, env)
        check_method_body(rescue_block, klass_context, env)
        check_method_body(else_block, klass_context, env) if else_block
      when :retry
      when :return
        value = tree.shift
        check_method_body(value, klass_context, env) if value
      when :sclass
        # >> class A; def foo; class << self; end; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:sclass, [:self], [:scope]]]]]
        name = tree.shift
        body = tree.shift
        check_method_body(name, klass_context, env)
        # body is some other environment. TODO: could do some more work here
      when :scope
        check_method_body(tree.shift, klass_context, env)
      when :self, :zarray
        # >> class A; def foo; []; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:zarray]]]]
      when :splat
        check_method_body(tree.shift, klass_context, env) while tree.length > 0
      when :str
        str = tree.shift
        expect(true, str.kind_of?(String))
      when :super, :yield, :next, :break
        # >> class A; def foo; super(a, b); end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:super, [:array, [:vcall, :a], [:vcall, :b]]]]]]
        arg = tree.shift
        # I've observed this with yield... not sure what it is
        second_arg = tree.shift
        check_method_body(arg, klass_context, env) if arg
        expect(second_arg) { |value| value.nil? || value == true }
      when :to_ary
        arg = tree.shift
        check_method_body(arg, klass_context, env)
      when :vcall, :fcall
        vcall_args = tree
        name = vcall_args.shift
        if env.defined?(name, klass_context)
          $log.info "Calling defined method #{env.pretty_call(name, klass_context)}"
        else
          puts "Possible name error while calling #{env.pretty_call(name, klass_context)}"
        end
        check_method_body(vcall_args.shift, klass_context, env) while vcall_args.length > 0
      when :when
        comparison = tree.shift
        body = tree.shift
        check_method_body(comparison, klass_context, env)
        check_method_body(body, klass_context, env) if body
      when :while, :until
        # >> class A; def foo; while 1; 2; end; end; end
        # => nil
        # >> ParseTree.translate A, :foo
        # => [:defn, :foo, [:scope, [:block, [:args], [:while, [:lit, 1], [:lit, 2], true]]]]
        condition = tree.shift
        body = tree.shift
        # TODO: figure out what this is actually used for
        expect(tree.shift) { |value| value == true || value == false }
        check_method_body(condition, klass_context, env)
        check_method_body(body, klass_context, env) if body
      when :zsuper
        # Dunno what this is
      else
        raise NotImplementedError.new("Unrecognized directive #{type.inspect} (remainder of tree is #{tree.inspect}")
      end

      expect([], tree)
    end
  end
end

def main
  options = {}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options] path/to/code"

    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      $log.level -= 1
    end

    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end
  end
  optparse.parse!

  if ARGV.length != 1
    puts optparse
    return 1
  end

  runner = RubyStaticChecker::Main.new(*ARGV)
  runner.main
  return 0
end

ret = main
begin
  exit(ret)
rescue TypeError
  exit(0)
end
